#pragma once

class RKMethod {
public:
	//const for easier access
	const Matrix<double> A;
	const Vector<double> c;
	const Vector<double> b_main;
	const Vector<double> b_subs;

	// constructor to fill
	RKMethod(const Matrix<double>& new_a, const Vector<double>& new_c, const Vector<double>& new_b_main, const Vector<double>& new_b_subs) : A(new_a), c(new_c), b_main(new_b_main), b_subs(new_b_subs) {}

};




//(4,3) Sarafyan's RK4(5)6
class RKMethodA : public RKMethod {
public:
	//constructor to fill
	RKMethodA()
		: RKMethod(
			//A
			{   6, 6,
				{0,					0,				0,				0,				0,          0,
				 1.0 / 2,			0,				0,				0,				0,          0,
				 1.0 / 4,		1.0 / 4,			0,				0,				0,          0,
				 0,					-1,				2,				0,				0,          0,
				 7.0 / 27,		10.0 / 27,			0,			1.0 / 27,			0,          0,
				 28.0 / 625,	-1.0 / 5,		546.0 / 625,	54.0 / 625,		-378.0 / 625,	0}
			},

			//c
			{ 0,  1.0 / 2,  1.0 / 2,  1,  2.0 / 3,  1.0 / 5 },

			//b_main
			{ 1.0 / 6, 0, 2.0 / 3, 1.0 / 6,  0,  0 },

			//b_subs
			{ 1.0 / 24, 0, 0, 5.0 / 48, 27.0 / 56, 125.0 / 336 }
		) {}

};


//(7,0) Verner's RK7(8)13
class RKMethodB : public RKMethod {
public:
	//constructor to fill
	RKMethodB()
		: RKMethod(
			//A
			{   13, 13,
				{		0,			 0,			0,						  0,                       0,					   0,                   0,				       0,				   0,					 0,				0,			0,      0,
					  1.0 / 4,         0,			0,					  0,                       0,					   0,                   0,				       0,				   0,					 0,				0,			0,      0,
					  5.0 / 72,      1.0 / 72,		0,					  0,                       0,					   0,                   0,				       0,				   0,					 0,				0,			0,      0,
					  1.0 / 32,        0,		  3.0 / 32,				  0,					   0,					   0,                   0,				       0,				   0,					 0,				0,			0,      0,
					106.0 / 125,       0,	   -408.0 / 125,		352.0 / 125,				   0,                      0,                   0,				       0,				   0,					 0,				0,			0,      0,
					  1.0 / 48,        0,			0,				  8.0 / 33,				   125.0 / 528,				   0,				    0,				       0,				   0,					 0,				0,			0,      0,
				 -1263.0 / 2401,      0,			0,            39936.0 / 26411,			-64125.0 / 26411,       5520.0 / 2401,			    0,				       0,				   0,					 0,				0,			0,      0,
				    37.0 / 392,       0,			0,					  0,				  1625.0 / 9408,          -2.0 / 15,           61.0 / 6720,				   0,				   0,					 0,				0,			0,      0,
				 17176.0 / 25515,     0,			0,           -47104.0 / 25515,			  1325.0 / 504,       -41792.0 / 25515,     20237.0 / 145800,       4312.0 / 6075,			   0,					 0,				0,			0,      0,
				-23834.0 / 180075,    0,			0,           -77824.0 / 1980825,	   -636635.0 / 633864,    254048.0 / 300125,     -183.0 / 7000,            8.0 / 11,        -324.0 / 3773,				 0,				0,			0,      0,
				 12733.0 / 7600,      0,			0,           -20032.0 / 5225,			456485.0 / 80256,     -42599.0 / 7125,     339227.0 / 912000,      -1029.0 / 4180,		1701.0 / 1408,		  5145.0 / 2432,		0,			0,      0,
				-27061.0 / 204120,    0,			0,            40448.0 / 280665,		  -1353775.0 / 1197504,    17662.0 / 25515,    -71687.0 / 1166400,		  98.0 / 225,		   1.0 / 16,		  3773.0 / 11664,		0,			0,      0,
				 11203.0 / 8680,      0,			0,           -38144.0 / 11935,		   2354425.0 / 458304,    -84046.0 / 16275,    673309.0 / 1636800,	    4704.0 / 8525,		9477.0 / 10912,		 -1029.0 / 992,			0,	  729.0 / 341,	0}

			},

			//c
			{ 0, 1.0 / 4, 1.0 / 12, 1.0 / 8, 2.0 / 5, 1.0 / 2, 6.0 / 7, 1.0 / 7, 2.0 / 3, 2.0 / 7, 1, 1.0 / 3, 1 },

			//b_main
			{ 13.0 / 288,  0, 0, 0, 0, 32.0 / 125, 31213.0 / 144000, 2401.0 / 12375,  1701.0 / 14080, 2401.0 / 19200, 19.0 / 950, 0,   0 },

			//b_subs
			{ 31.0 / 720, 0, 0, 0, 0, 16.0 / 75,  16807.0 / 79200,  16807.0 / 79200, 243.0 / 1760, 0,  0,   243.0 / 1760, 31.0 / 720 }
		) {}

};


